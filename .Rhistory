osmdata,
class,skimr,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select <- dplyr::select
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
#2 Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
table(test_final$localidad)
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
table(train_final$localidad)
#3 Limpieza de datos
#Imputar cubierta a superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
train_final = train_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
## convertir en sf
test_final <- st_as_sf(x=test_final,coords=c("lon","lat"),crs=4326)
train_final <- st_as_sf(x=train_final,coords=c("lon","lat"),crs=4326)
#poner minusculas descripcion
for (i in 1:nrow(test_final)) {
test_final$description[i]<-str_to_lower(string = test_final$description[i])
}
## Usar descripcion para hallar metros cuadrados
x = "[:space:]+[:digit:]+[:punct:]+[:digit:]+[:space:]+m2" ## pattern
test_final = test_final %>%
mutate(new_surface = str_extract(string=test_final$description , pattern= x))
sum(table(test_final$new_surface))
## another pattern
y = "[:space:]+[:digit:]+[:space:]+metros"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= y),
new_surface))
sum(table(test_final$new_surface))
z = "[:space:]+[:digit:]+[:space:]+mts"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= z),
new_surface))
sum(table(test_final$new_surface))
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+m2" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+metros" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+mts" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "," , replacement = ".")
}
test_final$new_surface <- as.numeric(test_final$new_surface)
class(test_final$new_surface)
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
new_surface,
surface_total))
## make buffer
house_buf <- st_buffer(test_final,dist=50)
leaflet() %>% addTiles() %>% addPolygons(data=house_buf , color="red") %>%
addCircles(data=test_final)
st_geometry(house_buf) = NULL
house_buf_mean <- house_buf %>% group_by(property_id) %>%
summarise(surface_new_3=mean(surface_total.y,na.rm=T))
house_buf
View(house_buf)
View(house_buf)
house_buf_mean <- house_buf %>% group_by(property_id) %>%
summarise(surface_new_3=mean(surface_total,na.rm=T))
test_final <- left_join(test_final,house_buf_mean,"property_id")
skim(test_final)
sum(table(test_final$new_surface))
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
class,skimr,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select <- dplyr::select
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
#2 Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
sum(table(test_final$surface_total))
#3 Limpieza de datos
#Imputar cubierta a superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
train_final = train_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
## convertir en sf
test_final <- st_as_sf(x=test_final,coords=c("lon","lat"),crs=4326)
train_final <- st_as_sf(x=train_final,coords=c("lon","lat"),crs=4326)
sum(table(test_final$surface_total))
## install package
rm(list=ls())
require(pacman)
p_load(rio,tidyverse,sf,leaflet,class,skimr)
##=== 0. load data ===##
house = import("http://eduard-martinez.github.io/data/fill-gis-vars/train.rds")
skim(house)
## dataframe to sf
house = st_as_sf(house,coords=c("lon","lat"),crs=4326)
## plot maps
leaflet() %>% addTiles() %>% addCircles(data=house)
## summary data
table(is.na(house$surface_total))
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
class,skimr,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select <- dplyr::select
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
#2 Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
table(is.na(test_final$surface_total))
#3 Limpieza de datos
#Imputar cubierta a superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
train_final = train_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
table(is.na(test_final$surface_total))
## convertir en sf
test_final <- st_as_sf(x=test_final,coords=c("lon","lat"),crs=4326)
train_final <- st_as_sf(x=train_final,coords=c("lon","lat"),crs=4326)
table(is.na(test_final$surface_total))
#poner minusculas descripcion
for (i in 1:nrow(test_final)) {
test_final$description[i]<-str_to_lower(string = test_final$description[i])
}
## Usar descripcion para hallar metros cuadrados
x = "[:space:]+[:digit:]+[:punct:]+[:digit:]+[:space:]+m2" ## pattern
test_final = test_final %>%
mutate(new_surface = str_extract(string=test_final$description , pattern= x))
sum(table(test_final$new_surface))
## another pattern
y = "[:space:]+[:digit:]+[:space:]+metros"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= y),
new_surface))
sum(table(test_final$new_surface))
z = "[:space:]+[:digit:]+[:space:]+mts"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= z),
new_surface))
sum(table(test_final$new_surface))
#volver new_surface a numeric
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+m2" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+metros" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+mts" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "," , replacement = ".")
}
test_final$new_surface <- as.numeric(test_final$new_surface)
class(test_final$new_surface)
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
new_surface,
surface_total))
table(is.na(test_final$surface_total))
table(is.na(test_final$surface_total))
## make buffer
house_buf <- st_buffer(test_final,dist=50)
leaflet() %>% addTiles() %>% addPolygons(data=house_buf , color="red") %>%
addCircles(data=test_final)
house_buf <- st_join(house_buf,test_final[,"surface_total"])
st_geometry(house_buf) = NULL
house_buf_mean <- house_buf %>% group_by(property_id) %>%
summarise(surface_new_3=mean(surface_total,na.rm=T))
test_final <- left_join(test_final,house_buf_mean,"property_id")
table(is.na(test_final$surface_total))
gc()
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
class,skimr,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select <- dplyr::select
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
#2 Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
table(is.na(test_final$surface_total))
#3 Limpieza de datos
#Imputar cubierta a superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
train_final = train_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
table(is.na(test_final$surface_total))
## convertir en sf
test_final <- st_as_sf(x=test_final,coords=c("lon","lat"),crs=4326)
train_final <- st_as_sf(x=train_final,coords=c("lon","lat"),crs=4326)
#poner minusculas descripcion
for (i in 1:nrow(test_final)) {
test_final$description[i]<-str_to_lower(string = test_final$description[i])
}
## Usar descripcion para hallar metros cuadrados
x = "[:space:]+[:digit:]+[:punct:]+[:digit:]+[:space:]+m2" ## pattern
test_final = test_final %>%
mutate(new_surface = str_extract(string=test_final$description , pattern= x))
sum(table(test_final$new_surface))
## another pattern
y = "[:space:]+[:digit:]+[:space:]+metros"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= y),
new_surface))
sum(table(test_final$new_surface))
z = "[:space:]+[:digit:]+[:space:]+mts"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= z),
new_surface))
sum(table(test_final$new_surface))
#volver new_surface a numeric
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+m2" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+metros" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+mts" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "," , replacement = ".")
}
test_final$new_surface <- as.numeric(test_final$new_surface)
class(test_final$new_surface)
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
new_surface,
surface_total))
table(is.na(test_final$surface_total))
## make buffer
house_buf <- st_buffer(test_final,dist=50)
leaflet() %>% addTiles() %>% addPolygons(data=house_buf , color="red") %>%
addCircles(data=test_final)
house_buf <- st_join(house_buf,test_final[,"surface_total"])
st_geometry(house_buf) = NULL
house_buf_mean <- house_buf %>% group_by(property_id) %>%
summarise(surface_new_3=mean(surface_total.y,na.rm=T))
test_final <- left_join(test_final,house_buf_mean,"property_id")
table(is.na(test_final$surface_total))
View(test_final)
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_new_3,
surface_total))
table(is.na(test_final$surface_total))
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
class,skimr,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select <- dplyr::select
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
#2 Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
table(is.na(test_final$surface_total))
#3 Limpieza de datos
#Imputar cubierta a superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
train_final = train_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_covered,
surface_total))
table(is.na(test_final$surface_total))
## convertir en sf
test_final <- st_as_sf(x=test_final,coords=c("lon","lat"),crs=4326)
train_final <- st_as_sf(x=train_final,coords=c("lon","lat"),crs=4326)
#poner minusculas descripcion
for (i in 1:nrow(test_final)) {
test_final$description[i]<-str_to_lower(string = test_final$description[i])
}
## Usar descripcion para hallar metros cuadrados
x = "[:space:]+[:digit:]+[:punct:]+[:digit:]+[:space:]+m2" ## pattern
test_final = test_final %>%
mutate(new_surface = str_extract(string=test_final$description , pattern= x))
sum(table(test_final$new_surface))
## another pattern
y = "[:space:]+[:digit:]+[:space:]+metros"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= y),
new_surface))
sum(table(test_final$new_surface))
z = "[:space:]+[:digit:]+[:space:]+mts"
test_final = test_final %>%
mutate(new_surface = ifelse(is.na(new_surface)==T,
str_extract(string=test_final$description , pattern= z),
new_surface))
sum(table(test_final$new_surface))
#volver new_surface a numeric
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+m2" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+metros" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "[:space:]+mts" , replacement = "")
}
for (i in 1:nrow(test_final)) {
test_final$new_surface[i]<-str_replace_all(string = test_final$new_surface[i] ,
pattern = "," , replacement = ".")
}
test_final$new_surface <- as.numeric(test_final$new_surface)
class(test_final$new_surface)
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
new_surface,
surface_total))
table(is.na(test_final$surface_total))
## make buffer 1
house_buf <- st_buffer(test_final,dist=35)
leaflet() %>% addTiles() %>% addPolygons(data=house_buf , color="red") %>%
addCircles(data=test_final)
house_buf <- st_join(house_buf,test_final[,"surface_total"])
st_geometry(house_buf) = NULL
house_buf_mean <- house_buf %>% group_by(property_id) %>%
summarise(surface_new_3=mean(surface_total.y,na.rm=T))
test_final <- left_join(test_final,house_buf_mean,"property_id")
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_new_3,
surface_total))
table(is.na(test_final$surface_total))
## make buffer 1
house_buf <- st_buffer(test_final,dist=100)
leaflet() %>% addTiles() %>% addPolygons(data=house_buf , color="red") %>%
addCircles(data=test_final)
house_buf <- st_join(house_buf,test_final[,"surface_total"])
st_geometry(house_buf) = NULL
house_buf_mean <- house_buf %>% group_by(property_id) %>%
summarise(surface_new_4=mean(surface_total.y,na.rm=T))
test_final <- left_join(test_final,house_buf_mean,"property_id")
# unificar superficie encontrada con superficie
test_final = test_final %>%
mutate(surface_total = ifelse(is.na(surface_total)==T,
surface_new_4,
surface_total))
table(is.na(test_final$surface_total))
