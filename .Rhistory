train$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
##
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
table(test_final$localidad)
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
sf) # Get OSM's data) # Visualizaciones dinámicas
###-Datos Shapefile Manzana Urbano DANE MGN -------
polygons_mzn <- st_read("MGN_URB_MANZANA.shp")
df_polygon <- data.frame(polygons_mzn)
View(df_polygon)
polygons_mzn <- st_read("localidades.shp")
df_polygon <- data.frame(polygons_mzn)
View(df_polygon)
polygons_mzn <- st_read("localidades.shp")
df_polygon <- data.frame(polygons_mzn) %>% select(., NOMBRE = "CHAPINERO")
View(df_polygon)
df_polygon <- data.frame(polygons_mzn) %>% select(., NOMBRE == "CHAPINERO")
View(df_polygon)
df_polygon <- data.frame(polygons_mzn) %>% subset(., NOMBRE == "CHAPINERO")
View(df_polygon)
df_polygon <- data.frame(polygons_mzn) %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE__LEN, geometry)
View(df_polygon)
df_polygon <- data.frame(polygons_mzn) %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
View(df_polygon)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
## Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
available_features() %>% head(20)
available_tags("amenity") %>% head(20)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
colnames(train_final_chapinero)
Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
sf) # Get OSM's data) # Visualizaciones dinámicas
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
## Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
available_features() %>% head(20)
available_tags("amenity") %>% head(20)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
###-Datos Shapefile Manzana Urbano DANE MGN -------
polygons_mzn <- st_read("localidades.shp")
df_polygon <- data.frame(polygons_mzn) %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
View(df_polygon)
## convertir en sf
housing_chapinero = st_as_sf(x=train_final_chapinero,coords=c("lon","lat"),crs=4326)
class(housing_chapinero)
## obtener la caja de coordenada que contiene el polígono de Bogotá
opq(bbox = getbb("Bogotá Chapinero Colombia"))
## objeto osm
osm = opq(bbox = getbb("Bogotá Chapinero Colombia")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osm)
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
osm_sf
## Obtener un objeto sf
bus_station = osm_sf$osm_points %>% select(osm_id,amenity)
bus_station
## Pintar las estaciones de autobus, la localidad y los aptos
leaflet() %>% addTiles() %>% addCircleMarkers(data=bus_station , col="red") %>% addPolygons(data=df_polygon) %>%
addCircleMarkers(data=housing_chapinero , col="red" , label=housing_chapinero$property_id)
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
sf) # Get OSM's data) # Visualizaciones dinámicas
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
## Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
available_features() %>% head(20)
available_tags("amenity") %>% head(20)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
###-Datos Shapefile Manzana Urbano DANE MGN -------
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
## convertir en sf
housing_chapinero = st_as_sf(x=train_final_chapinero,coords=c("lon","lat"),crs=4326)
class(housing_chapinero)
## obtener la caja de coordenada que contiene el polígono de Bogotá
opq(bbox = getbb("Bogotá Colombia"))
## objeto osm
osm = opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osm)
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
osm_sf
## Obtener un objeto sf
bus_station = osm_sf$osm_points %>% select(osm_id,amenity)
bus_station
## Pintar las estaciones de autobus, la localidad y los aptos
leaflet() %>% addTiles() %>% addCircleMarkers(data=bus_station , col="red") %>% addPolygons(data=df_polygon) %>%
addCircleMarkers(data=housing_chapinero , col="red" , label=housing_chapinero$property_id)
## Pintar las estaciones de autobus, la localidad y los aptos
leaflet() %>% addTiles() %>% addCircleMarkers(data=bus_station , col="red") %>% addPolygons(data=polygon) %>%
addCircleMarkers(data=housing_chapinero , col="red" , label=housing_chapinero$property_id)
polygon
# reproject data
polygon_WGS84 <- spTransform(polygon, crs(bus_station))
# what is the CRS of the new object
crs(polygon_WGS84)
## CRS arguments:
##  +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
# does the extent look like decimal degrees?
extent(polygon_WGS84)
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
## Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
available_features() %>% head(20)
available_tags("amenity") %>% head(20)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
###-Datos Shapefile Manzana Urbano DANE MGN -------
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
## convertir en sf
housing_chapinero = st_as_sf(x=train_final_chapinero,coords=c("lon","lat"),crs=4326)
class(housing_chapinero)
## obtener la caja de coordenada que contiene el polígono de Bogotá
opq(bbox = getbb("Bogotá Colombia"))
## objeto osm
osm = opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osm)
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
osm_sf
## Obtener un objeto sf
bus_station = osm_sf$osm_points %>% select(osm_id,amenity)
bus_station
# reproject data
polygon_WGS84 <- spTransform(polygon, crs(bus_station))
# what is the CRS of the new object
crs(polygon_WGS84)
## CRS arguments:
##  +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
# does the extent look like decimal degrees?
extent(polygon_WGS84)
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select::use_package("dplyr")
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
## Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
available_features() %>% head(20)
available_tags("amenity") %>% head(20)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
###-Datos Shapefile Manzana Urbano DANE MGN -------
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
## convertir en sf
housing_chapinero = st_as_sf(x=train_final_chapinero,coords=c("lon","lat"),crs=4326)
class(housing_chapinero)
## obtener la caja de coordenada que contiene el polígono de Bogotá
opq(bbox = getbb("Bogotá Colombia"))
## objeto osm
osm = opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osm)
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
osm_sf
## Obtener un objeto sf
bus_station = osm_sf$osm_points %>% select(osm_id,amenity)
bus_station
# reproject data
polygon_WGS84 <- spTransform(polygon, crs(bus_station))
#Problem set 3
#Limpiar memoria y colocar el WD------
rm(list=ls()) ## Limpiar el entorno de trabajo
getwd()
#librerias----
require(pacman) # Llamar pacman (contiene la función p_load)
# Llamar/instalar-llamar las librerías-----
p_load(tidyverse, # manipular/limpiar conjuntos de datos.
rio, # función import/export: leer/escribir archivos desde diferentes formatos.
sf, # Leer/escribir/manipular datos espaciales
leaflet,
tmaptools, # geocode_OSM()
osmdata,
sf,rgdal,raster,rgeos) # Get OSM's data) # Visualizaciones dinámicas
select <- dplyr::select
#1 Obtener datos-------
## descomprimir archivo
test <- readRDS("test.Rds")
train <- readRDS("train.Rds")
glimpse(test)
glimpse(train)
table(test$title)
## Filtrar por Chapinero y El Poblado -----
test$localidad_filtrada_chapinero <- grepl("chapinero", test$title, ignore.case= T)
test$localidad_filtrada_poblado <- grepl("el poblado|poblado", test$title, ignore.case= T)
test$localidad <- ifelse(test$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(test$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
##
train$localidad_filtrada_chapinero <- grepl("chapinero", train$title, ignore.case= T)
train$localidad_filtrada_poblado <- grepl("el poblado|poblado", train$title, ignore.case= T)
train$localidad <- ifelse(train$localidad_filtrada_chapinero == TRUE, "CHAPINERO",
ifelse(train$localidad_filtrada_poblado == TRUE, "POBLADO","NO APLICA"))
table(test$localidad)
table(train$localidad)
test_final <- subset(test, localidad == "CHAPINERO"|localidad== "POBLADO")
train_final <- subset(train, localidad == "CHAPINERO"|localidad== "POBLADO")
available_features() %>% head(20)
available_tags("amenity") %>% head(20)
test_final_chapinero <- subset(test, localidad == "CHAPINERO")
train_final_chapinero <- subset(train, localidad == "CHAPINERO")
test_final_poblado <- subset(test, localidad== "POBLADO")
train_final_poblado <- subset(train, localidad== "POBLADO")
###-Datos Shapefile Manzana Urbano DANE MGN -------
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
## convertir en sf
housing_chapinero = st_as_sf(x=train_final_chapinero,coords=c("lon","lat"),crs=4326)
class(housing_chapinero)
## obtener la caja de coordenada que contiene el polígono de Bogotá
opq(bbox = getbb("Bogotá Colombia"))
## objeto osm
osm = opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value="bus_station")
class(osm)
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
osm_sf
## Obtener un objeto sf
bus_station = osm_sf$osm_points %>% select(osm_id,amenity)
bus_station
# reproject data
polygon_WGS84 <- spTransform(polygon, crs(bus_station))
class(polygon)
# reproject data
#polygon_WGS84 <- spTransform(polygon, crs(bus_station))
polygon_WGS84 <-st_transform(polygon, CRS("+proj=gnom +lat_0=90 +lon_0=-50"))
# what is the CRS of the new object
crs(polygon_WGS84)
extent(polygon_WGS84)
# reproject data
#polygon_WGS84 <- spTransform(polygon, crs(bus_station))
#polygon_WGS84 <-st_transform(polygon, CRS("+proj=gnom +lat_0=90 +lon_0=-50"))
polygon_WGS84 <-st_transform(polygon, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# what is the CRS of the new object
crs(polygon_WGS84)
## CRS arguments:
##  +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
# does the extent look like decimal degrees?
extent(polygon_WGS84)
## Pintar las estaciones de autobus, la localidad y los aptos
leaflet() %>% addTiles() %>% addCircleMarkers(data=bus_station , col="red") %>% addPolygons(data=polygon) %>%
addCircleMarkers(data=housing_chapinero , col="red" , label=housing_chapinero$property_id)
crs(housing_chapinero)
crs(bus_station)
# reproject data
#polygon_WGS84 <- spTransform(polygon, crs(bus_station))
#polygon_WGS84 <-st_transform(polygon, CRS("+proj=gnom +lat_0=90 +lon_0=-50"))
polygon_WGS84 <-st_transform(polygon, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
housing_chapinero <-st_transform(housing_chapinero, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
bus_station <-st_transform(bus_station, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# what is the CRS of the new object
crs(polygon_WGS84)
## CRS arguments:
##  +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0
# does the extent look like decimal degrees?
extent(polygon_WGS84)
## Pintar las estaciones de autobus, la localidad y los aptos
leaflet() %>% addTiles() %>% addCircleMarkers(data=bus_station , col="red") %>% addPolygons(data=polygon) %>%
addCircleMarkers(data=housing_chapinero , col="red" , label=housing_chapinero$property_id)
leaflet() %>% addTiles() %>% addPolygons(data=polygon,, col="blue")
leaflet() %>% addTiles() %>% addPolygons(data=polygon, col="blue")
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
polygon
leaflet() %>% addTiles() %>% addPolygons(data=polygon , col="red")
polygons_mzn <- st_read("localidades.shp")
polygon <- polygons_mzn %>%
subset(., NOMBRE == "CHAPINERO") %>%
select (., NOMBRE, SHAPE_AREA,SHAPE_LEN, geometry)
polygon_trans <- sf::st_transform(polygon, 4326)
polygon_trans
map <- leaflet() %>%
addTiles(group = "Open Street")%>%
addPolygon(data = polygon_trans, group = "Pipeline",  color = "blue", opacity = 1)%>%
addLayersControl(
baseGroups = c("Open Street", "World Imagery")
)
map
leaflet() %>% addTiles() %>% addPolygons(data=polygon , col="red")
map <- leaflet() %>%
addTiles(group = "Open Street")%>%
addPolygons(data = polygon_trans, color = "blue")%>%
addLayersControl(
baseGroups = c("Open Street", "World Imagery")
)
map
map <- leaflet() %>%
addTiles(group = "Open Street")%>%
addPolygons(data = polygon_trans, color = "blue")%>%
addCircleMarkers(data=bus_station , col="red")
addLayersControl(
baseGroups = c("Open Street", "World Imagery")
)
map
map <- leaflet() %>%
addTiles(group = "Open Street")%>%
addPolygons(data = polygon_trans, color = "blue")%>%
addCircleMarkers(data=bus_station , col="red")%>%
addCircleMarkers(data=housing_chapinero , col="green" , label=housing_chapinero$property_id)
addLayersControl(
baseGroups = c("Open Street", "World Imagery")
)
map
